
from collections import defaultdict
dataset = [
    {'Weather': 'Sunny', 'Temperature': 'Hot', 'Play': 'No'},
    {'Weather': 'Sunny', 'Temperature': 'Hot', 'Play': 'No'},
    {'Weather': 'Overcast', 'Temperature': 'Hot', 'Play': 'Yes'},
    {'Weather': 'Rainy', 'Temperature': 'Mild', 'Play': 'Yes'},
    {'Weather': 'Rainy', 'Temperature': 'Cool', 'Play': 'Yes'},
    {'Weather': 'Rainy', 'Temperature': 'Cool', 'Play': 'No'},
    {'Weather': 'Overcast', 'Temperature': 'Cool', 'Play': 'Yes'},
    {'Weather': 'Sunny', 'Temperature': 'Mild', 'Play': 'No'},
    {'Weather': 'Sunny', 'Temperature': 'Cool', 'Play': 'Yes'},
    {'Weather': 'Rainy', 'Temperature': 'Mild', 'Play': 'Yes'},
    {'Weather': 'Sunny', 'Temperature': 'Mild', 'Play': 'Yes'},
    {'Weather': 'Overcast', 'Temperature': 'Mild', 'Play': 'Yes'},
    {'Weather': 'Overcast', 'Temperature': 'Hot', 'Play': 'Yes'},
    {'Weather': 'Rainy', 'Temperature': 'Mild', 'Play': 'No'}
]
class_counts = defaultdict(int)
feature_given_class_counts = defaultdict(lambda: defaultdict(int))

for row in dataset:
    label = row['Play']
    class_counts[label] += 1
    for feature in row:
        if feature != 'Play':
            key = (feature, row[feature])
            feature_given_class_counts[key][label] += 1

total_samples = len(dataset)
priors = {}
for label in class_counts:
 priors[label] = class_counts[label] / total_samples
test_input = {'Weather': 'Sunny', 'Temperature': 'Cool'}
posterior_probs = {}
for label in class_counts:
    likelihood = 1.0
    for feature, value in test_input.items():
        key = (feature, value)
        feature_count = feature_given_class_counts[key][label]
        likelihood *= feature_count / class_counts[label] if class_counts[label] != 0 else 0
    posterior_probs[label] = priors[label] * likelihood
total_prob = sum(posterior_probs.values())
for label in posterior_probs:
    posterior_probs[label] /= total_prob
print("Posterior Probabilities:")
for label, prob in posterior_probs.items():
    print(f"P(Play = {label} | {test_input}) = {prob:.4f}")
prediction = max(posterior_probs, key=posterior_probs.get)
print(f"\nFinal Prediction: Play = {prediction}")


OUTPUT :                                                                                                                                                                               

Posterior Probabilities:
P(Play = No | {'Weather': 'Sunny', 'Temperature': 'Cool'}) = 0.4737
P(Play = Yes | {'Weather': 'Sunny', 'Temperature': 'Cool'}) = 0.5263

Final Prediction: Play = Yes
